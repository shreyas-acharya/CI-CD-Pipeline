name: "CI CD Pipeline"
on: [push, workflow_dispatch]
jobs:
  SAST:
    runs-on: ubuntu-latest
    steps:
      - name: Clone repository
        uses: actions/checkout@v3
      - name: Update submodules
        run: git submodule update --init --recursive
      - name: Install dependencies
        uses: ./.github/actions/InstallDependencies
      - name: Run Semgrep
        run: semgrep --config=auto --output semgrep_scan_results.json --json UserApplication
      - name: Upload Arfifact
        uses: actions/upload-artifact@v3
        with:
          name: sast findings
          path: semgrep_scan_results.json
  TrivyScanning:
    runs-on: ubuntu-latest
    steps:
      - name: Clone repository
        uses: actions/checkout@v3
        with:
          repository: shreyas-acharya/UserApplication
      - name: Build docker image
        run: docker build -t userapplication-image .
      - name: Container Scanning
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'userapplication-image'
          format: json
          output: trivy_scan_results.json
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: trivy findings
          path: trivy_scan_results.json
  Jira:
    needs: [SAST, TrivyScanning]
    runs-on: ubuntu-latest
    steps:
      - name: Clone repository
        uses: actions/checkout@v3
      - name: Download artifact
        uses: actions/download-artifact@v3
      - name: Instal Dependencies
        uses: ./.github/actions/InstallDependencies
        with:
          submodule_dependency: false
      - name: Parse findings
        env:
          JIRA_EMAIL: ${{ secrets.JIRA_EMAIL }}
          JIRA_TOKEN: ${{ secrets.JIRA_TOKEN }}
          JIRA_SERVER: ${{ secrets.JIRA_SERVER }}
        run: python3 trivy_scanning.py trivy_scan_results.json semgrep_scan_results.json
  API_Testing:
    needs: Jira
    runs-on: ubuntu-latest
    services:
      db:
        image: postgres
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test
    steps:
      - name: Clone repository
        uses: actions/checkout@v3
      - name: Update Submodules
        run: git submodule update --init --recursive
      - name: Install dependencies
        uses: ./.github/actions/InstallDependencies
      - name: Run Api Tests
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test
          POSTGRES_HOST: localhost
        run: python3 test_endpoints.py
  # JiraTickets:

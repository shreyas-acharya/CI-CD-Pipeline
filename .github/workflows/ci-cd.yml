name: "CI CD Pipeline"
# on: [push, workflow_dispatch, repository_dispatch]
on: [workflow_dispatch, repository_dispatch]
jobs:
  # SAST:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Clone repository
  #       uses: actions/checkout@v3
  #     - name: Update submodules
  #       run: git submodule update --init --recursive
  #     - name: Install dependencies
  #       uses: ./.github/actions/InstallDependencies
  #     - name: Run Semgrep
  #       run: semgrep --config=auto --output semgrep_scan_results.json --json UserApplication
  #     - name: Upload Arfifact
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: sast findings
  #         path: semgrep_scan_results.json
  # TrivyScanning:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Clone repository
  #       uses: actions/checkout@v3
  #       with:
  #         repository: shreyas-acharya/UserApplication
  #     - name: Build docker image
  #       run: docker build -t userapplication-image .
  #     - name: Container Scanning
  #       uses: aquasecurity/trivy-action@master
  #       with:
  #         image-ref: 'userapplication-image'
  #         format: json
  #         output: trivy_scan_results.json
  #     - name: Upload artifact
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: trivy findings
  #         path: trivy_scan_results.json
  # Jira:
  #   needs: [SAST, TrivyScanning]
  #   runs-on: ubuntu-latest
  #   continue-on-error: ${{ github.event_name == 'workflow_dispatch' }}
  #   steps:
  #     - name: Clone repository
  #       uses: actions/checkout@v3
  #     - name: Download artifact
  #       uses: actions/download-artifact@v3
  #     # - run: ls -lR
  #     - name: Instal Dependencies
  #       uses: ./.github/actions/InstallDependencies
  #     - name: Parse findings
  #       env:
  #         JIRA_EMAIL: ${{ secrets.JIRA_EMAIL }}
  #         JIRA_TOKEN: ${{ secrets.JIRA_TOKEN }}
  #         JIRA_SERVER: ${{ secrets.JIRA_SERVER }}
  #       run: python3 trivy_scanning.py ./trivy\ findings/trivy_scan_results.json ./sast\ findings/semgrep_scan_results.json
  # API_Testing:
  #   needs: Jira
  #   runs-on: ubuntu-latest
  #   services:
  #     db:
  #       image: postgres
  #       ports:
  #         - 5432:5432
  #       env:
  #         POSTGRES_USER: test
  #         POSTGRES_PASSWORD: test
  #         POSTGRES_DB: test
  #   steps:
  #     - name: Clone repository
  #       uses: actions/checkout@v3
  #     - name: Update Submodules
  #       run: git submodule update --init --recursive
  #     - name: Install dependencies
  #       uses: ./.github/actions/InstallDependencies
  #       with:
  #         submodule_dependency: true
  #     - name: Run Api Tests
  #       env:
  #         POSTGRES_USER: test
  #         POSTGRES_PASSWORD: test
  #         POSTGRES_DB: test
  #         POSTGRES_HOST: localhost
  #       run: python3 test_endpoints.py
  # PushImages:
  #   needs: API_Testing
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Clone repository
  #       uses: actions/checkout@v3
  #       with:
  #         repository: shreyas-acharya/UserApplication
  #     - name: Login to ghcr.io
  #       uses: docker/login-action@v1
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.PAT_TOKEN }}
  #     - name: Build and push images
  #       run: |
  #         chmod +x build.sh
  #         ./build.sh
  Deploy:
    # needs: PushImages
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_INSTANCE_ID: ${{ secrets.AWS_INSTANCE_ID }}
      AWS_USERNAME: ${{ secrets.AWS_USERNAME }}
      AWS_HOSTNAME: ${{ secrets.AWS_HOSTNAME }}
      AWS_PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY }}
      AWS_PUBLIC_ADDR: ${{ secrets.AWS_PUBLIC_ADDR}}
      USERNAME: ${{ secrets.USERNAME }}
      PASSWORD: ${{ secrets.PASSWORD }}
      DATABASE: ${{ secrets.DATABASE }}
      VERSION: ${{ vars.VERSION }}
    steps:
      - name: Start the EC2 Instance
        run: aws ec2 start-instances --instance-id $AWS_INSTANCE_ID
      - name: List EC2 Instances
        run: |
          # sleep 20
          aws ec2 describe-instances
      - name: SSH into EC2 Instance
        run: |
          mkdir -p ~/.ssh
          echo "$AWS_PRIVATE_KEY" > ~/.ssh/github-actions-key
          chmod 600 ~/.ssh/github-actions-key 
          cat >>~/.ssh/config <<END
          Host ec2
            HostName $AWS_HOSTNAME
            User $AWS_USERNAME
            IdentityFile ~/.ssh/github-actions-key
            StrictHostKeyChecking no
          END
      - name: Setup nginx
        run: ssh ec2 echo "Testing" > test.txt
